Prof-1 (maxTimeInitial=10000)

Timer unit: 1e-07 s

Total time: 4.44508 s
File: SIRmodel_cl_op.py
Function: pingus at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def pingus():
     9         1        205.0    205.0      0.0         p = 1                                                          #
population
    10         1         84.0     84.0      0.0         i = 0.01*p                                                     #
infected
    11         1         73.0     73.0      0.0         s = p-i                                                        #
susceptible
    12         1         67.0     67.0      0.0         r = 0                                                          #
recovered/removed
    13
    14         1         66.0     66.0      0.0         a = 3.2                                                        #
transmission parameter
    15         1         66.0     66.0      0.0         b = 0.23                                                       #
recovery parameter
    16
    17         1         65.0     65.0      0.0         initialTime = 0
    18         1         66.0     66.0      0.0         deltaTime = 0.001                                              #
smaller the delta, better the approximation to a real derivative
    19         1         65.0     65.0      0.0         maxTime = 10000                                                #
more number of points, better is the curve generated
    20
    21         1         69.0     69.0      0.0         def sPrime(oldS, oldI, transmissionRate):                      #
differential equations being expressed as functions to
    22                                                          return -1*((transmissionRate*oldS*oldI)/p)             #
calculate rate of change between time intervals of the
    23                                                                                                                 #
different quantities i.e susceptible, infected and recovered/removed
    24         1         68.0     68.0      0.0         def iPrime(oldS, oldI, transmissionRate, recoveryRate):
    25                                                          return (((transmissionRate*oldS)/p)-recoveryRate)*oldI
    26
    27         1         68.0     68.0      0.0         def rPrime(oldI, recoveryRate):
    28                                                          return recoveryRate*oldI
    29
    30         1         66.0     66.0      0.0         maxTimeInitial = maxTime
    31
    32         1         71.0     71.0      0.0         def genData(transRate, recovRate, maxT):
    33                                                          global a, b, maxTimeInitial
    34                                                          a = transRate
    35                                                          b = recovRate
    36                                                          maxTimeInitial = maxT
    37
    38                                                          sInitial = s
    39                                                          iInitial = i
    40                                                          rInitial = r
    41
    42                                                          time = np.arange(maxTimeInitial+1)
    43                                                          sVals = np.zeros(maxTimeInitial+1)
    44                                                          iVals = np.zeros(maxTimeInitial+1)
    45                                                          rVals = np.zeros(maxTimeInitial+1)
    46
    47                                                          for t in range(initialTime, maxTimeInitial+1):         #
generating the data through a loop
    48                                                                  sVals[t] = sInitial
    49                                                                  iVals[t] = iInitial
    50                                                                  rVals[t] = rInitial
    51
    52                                                                  newDeltas = (sPrime(sInitial, iInitial, transmis
sionRate=a), iPrime(sInitial, iInitial, transmissionRate=a, recoveryRate=b), rPrime(iInitial, recoveryRate=b))
    53                                                                  sInitial += newDeltas[0]*deltaTime
    54                                                                  iInitial += newDeltas[1]*deltaTime
    55                                                                  rInitial += newDeltas[2]*deltaTime
    56
    57                                                                  if sInitial < 0 or iInitial < 0 or rInitial < 0#
as soon as any of these value become negative, the data generated becomes invalid
    58                                                                          break                                  #
according to the SIR model, we assume all values of S, I and R are always positive.
    59
    60                                                          return (time, sVals, iVals, rVals)
    61
    62         1    3235359.0 3235359.0      7.3        fig, ax = plt.subplots()
    63         1       9432.0   9432.0      0.0         plt.subplots_adjust(bottom=0.4, top=0.94)
    64
    65         1       4930.0   4930.0      0.0         plt.title('SIR epidemiology curves for a disease')
    66
    67         1       2600.0   2600.0      0.0         plt.xlim(0, maxTime+1)
    68         1       3138.0   3138.0      0.0         plt.ylim(0, p*1.4)
    69
    70         1       1437.0   1437.0      0.0         plt.xlabel('Time (t)')
    71         1        810.0    810.0      0.0         plt.ylabel('Population (p)')
    72
    73         1     934123.0 934123.0      2.1         initialData = genData(a, b, maxTimeInitial)
    74
    75         1      31275.0  31275.0      0.1         susceptible, = ax.plot(initialData[0], initialData[1], label='Su
sceptible', color='b')
    76         1      20270.0  20270.0      0.0         infected, = ax.plot(initialData[0], initialData[2], label='Infec
ted', color='r')
    77         1      22288.0  22288.0      0.1         recovered, = ax.plot(initialData[0], initialData[3], label='Reco
vered/Removed', color='g')
    78
    79         1      89089.0  89089.0      0.2         plt.legend()
    80
    81         1     696578.0 696578.0      1.6         transmissionAxes = plt.axes([0.125, 0.25, 0.775, 0.03], facecolo
r='white')
    82         1     470060.0 470060.0      1.1         recoveryAxes = plt.axes([0.125, 0.2, 0.775, 0.03], facecolor='wh
ite')
    83         1     460063.0 460063.0      1.0         timeAxes = plt.axes([0.125, 0.15, 0.775, 0.03], facecolor='white
')
    84
    85         1      83726.0  83726.0      0.2         transmissionSlider = Slider(transmissionAxes, 'Transmission para
meter', 0, 10, valinit=a, valstep=0.01)
    86         1      77563.0  77563.0      0.2         recoverySlider = Slider(recoveryAxes, 'Recovery parameter', 0, 1
0, valinit=b, valstep=0.01)
    87         1      76545.0  76545.0      0.2         timeSlider = Slider(timeAxes, 'Max time', 0, 100000, valinit=max
Time, valstep=1, valfmt="%i")
    88
    89         1         91.0     91.0      0.0         def updateTransmission(newVal):
    90                                                          newData = genData(newVal, b, maxTimeInitial)
    91
    92                                                          susceptible.set_ydata(newData[1])
    93                                                          infected.set_ydata(newData[2])
    94                                                          recovered.set_ydata(newData[3])
    95
    96                                                          r_o.set_text(r'$R_O$={:.2f}'.format(a/b))
    97
    98                                                          fig.canvas.draw_idle()
    99
   100         1         74.0     74.0      0.0         def updateRecovery(newVal):
   101                                                          newData = genData(a, newVal, maxTimeInitial)
   102
   103                                                          susceptible.set_ydata(newData[1])
   104                                                          infected.set_ydata(newData[2])
   105                                                          recovered.set_ydata(newData[3])
   106
   107                                                          r_o.set_text(r'$R_O$={:.2f}'.format(a/b))
   108
   109                                                          fig.canvas.draw_idle()
   110
   111         1         70.0     70.0      0.0         def updateMaxTime(newVal):
   112                                                          global susceptible, infected, recovered
   113
   114                                                          newData = genData(a, b, int(newVal.item()))
   115
   116                                                          del ax.lines[:3]
   117
   118                                                          susceptible, = ax.plot(newData[0], newData[1], label='Su
sceptible', color='b')
   119                                                          infected, = ax.plot(newData[0], newData[2], label='Infec
ted', color='r')
   120                                                          recovered, = ax.plot(newData[0], newData[3], label='Reco
vered/Removed', color='g')
   121
   122         1        106.0    106.0      0.0         transmissionSlider.on_changed(updateTransmission)
   123         1         86.0     86.0      0.0         recoverySlider.on_changed(updateRecovery)
   124         1         85.0     85.0      0.0         timeSlider.on_changed(updateMaxTime)
   125
   126         1     655907.0 655907.0      1.5         resetAxes = plt.axes([0.8, 0.025, 0.1, 0.05])
   127         1      11089.0  11089.0      0.0         resetButton = Button(resetAxes, 'Reset', color='white')
   128
   129         1       8711.0   8711.0      0.0         r_o = plt.text(0.1, 1.5, r'$R_O$={:.2f}'.format(a/b), fontsize=1
2)
   130
   131         1         88.0     88.0      0.0         def reset(event):
   132                                                      transmissionSlider.reset()
   133                                                      recoverySlider.reset()
   134                                                      timeSlider.reset()
   135
   136         1        109.0    109.0      0.0         resetButton.on_clicked(reset)
   137
   138         1   37554039.0 37554039.0     84.5       plt.show()

prof - 2 (maxTimeInitial=100000)

Timer unit: 1e-07 s

Total time: 4.97358 s
File: SIRmodel_cl_op.py
Function: pingus at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           @profile
     8                                           def pingus():
     9         1        124.0    124.0      0.0         p = 1                                                          #
population
    10         1         83.0     83.0      0.0         i = 0.01*p                                                     #
infected
    11         1         73.0     73.0      0.0         s = p-i                                                        #
susceptible
    12         1         65.0     65.0      0.0         r = 0                                                          #
recovered/removed
    13
    14         1         65.0     65.0      0.0         a = 3.2                                                        #
transmission parameter
    15         1         65.0     65.0      0.0         b = 0.23                                                       #
recovery parameter
    16
    17         1         65.0     65.0      0.0         initialTime = 0
    18         1         66.0     66.0      0.0         deltaTime = 0.001                                              #
smaller the delta, better the approximation to a real derivative
    19         1         66.0     66.0      0.0         maxTime = 100000                                               #
more number of points, better is the curve generated
    20
    21         1         68.0     68.0      0.0         def sPrime(oldS, oldI, transmissionRate):                      #
differential equations being expressed as functions to
    22                                                          return -1*((transmissionRate*oldS*oldI)/p)             #
calculate rate of change between time intervals of the
    23                                                                                                                 #
different quantities i.e susceptible, infected and recovered/removed
    24         1         67.0     67.0      0.0         def iPrime(oldS, oldI, transmissionRate, recoveryRate):
    25                                                          return (((transmissionRate*oldS)/p)-recoveryRate)*oldI
    26
    27         1         68.0     68.0      0.0         def rPrime(oldI, recoveryRate):
    28                                                          return recoveryRate*oldI
    29
    30         1         66.0     66.0      0.0         maxTimeInitial = maxTime
    31
    32         1         69.0     69.0      0.0         def genData(transRate, recovRate, maxT):
    33                                                          global a, b, maxTimeInitial
    34                                                          a = transRate
    35                                                          b = recovRate
    36                                                          maxTimeInitial = maxT
    37
    38                                                          sInitial = s
    39                                                          iInitial = i
    40                                                          rInitial = r
    41
    42                                                          time = np.arange(maxTimeInitial+1)
    43                                                          sVals = np.zeros(maxTimeInitial+1)
    44                                                          iVals = np.zeros(maxTimeInitial+1)
    45                                                          rVals = np.zeros(maxTimeInitial+1)
    46
    47                                                          for t in range(initialTime, maxTimeInitial+1):         #
generating the data through a loop
    48                                                                  sVals[t] = sInitial
    49                                                                  iVals[t] = iInitial
    50                                                                  rVals[t] = rInitial
    51
    52                                                                  newDeltas = (sPrime(sInitial, iInitial, transmis
sionRate=a), iPrime(sInitial, iInitial, transmissionRate=a, recoveryRate=b), rPrime(iInitial, recoveryRate=b))
    53                                                                  sInitial += newDeltas[0]*deltaTime
    54                                                                  iInitial += newDeltas[1]*deltaTime
    55                                                                  rInitial += newDeltas[2]*deltaTime
    56
    57                                                                  if sInitial < 0 or iInitial < 0 or rInitial < 0#
as soon as any of these value become negative, the data generated becomes invalid
    58                                                                          break                                  #
according to the SIR model, we assume all values of S, I and R are always positive.
    59
    60                                                          return (time, sVals, iVals, rVals)
    61
    62         1    2446024.0 2446024.0      4.9        fig, ax = plt.subplots()
    63         1       9785.0   9785.0      0.0         plt.subplots_adjust(bottom=0.4, top=0.94)
    64
    65         1       4792.0   4792.0      0.0         plt.title('SIR epidemiology curves for a disease')
    66
    67         1       2665.0   2665.0      0.0         plt.xlim(0, maxTime+1)
    68         1       3222.0   3222.0      0.0         plt.ylim(0, p*1.4)
    69
    70         1       1482.0   1482.0      0.0         plt.xlabel('Time (t)')
    71         1        792.0    792.0      0.0         plt.ylabel('Population (p)')
    72
    73         1    8871826.0 8871826.0     17.8        initialData = genData(a, b, maxTimeInitial)
    74
    75         1     110612.0 110612.0      0.2         susceptible, = ax.plot(initialData[0], initialData[1], label='Su
sceptible', color='b')
    76         1      96983.0  96983.0      0.2         infected, = ax.plot(initialData[0], initialData[2], label='Infec
ted', color='r')
    77         1      99011.0  99011.0      0.2         recovered, = ax.plot(initialData[0], initialData[3], label='Reco
vered/Removed', color='g')
    78
    79         1     126688.0 126688.0      0.3         plt.legend()
    80
    81         1     749153.0 749153.0      1.5         transmissionAxes = plt.axes([0.125, 0.25, 0.775, 0.03], facecolo
r='white')
    82         1     427809.0 427809.0      0.9         recoveryAxes = plt.axes([0.125, 0.2, 0.775, 0.03], facecolor='wh
ite')
    83         1     412136.0 412136.0      0.8         timeAxes = plt.axes([0.125, 0.15, 0.775, 0.03], facecolor='white
')
    84
    85         1      82111.0  82111.0      0.2         transmissionSlider = Slider(transmissionAxes, 'Transmission para
meter', 0, 10, valinit=a, valstep=0.01)
    86         1      78757.0  78757.0      0.2         recoverySlider = Slider(recoveryAxes, 'Recovery parameter', 0, 1
0, valinit=b, valstep=0.01)
    87         1      79710.0  79710.0      0.2         timeSlider = Slider(timeAxes, 'Max time', 0, 100000, valinit=max
Time, valstep=1, valfmt="%i")
    88
    89         1         92.0     92.0      0.0         def updateTransmission(newVal):
    90                                                          newData = genData(newVal, b, maxTimeInitial)
    91
    92                                                          susceptible.set_ydata(newData[1])
    93                                                          infected.set_ydata(newData[2])
    94                                                          recovered.set_ydata(newData[3])
    95
    96                                                          r_o.set_text(r'$R_O$={:.2f}'.format(a/b))
    97
    98                                                          fig.canvas.draw_idle()
    99
   100         1         74.0     74.0      0.0         def updateRecovery(newVal):
   101                                                          newData = genData(a, newVal, maxTimeInitial)
   102
   103                                                          susceptible.set_ydata(newData[1])
   104                                                          infected.set_ydata(newData[2])
   105                                                          recovered.set_ydata(newData[3])
   106
   107                                                          r_o.set_text(r'$R_O$={:.2f}'.format(a/b))
   108
   109                                                          fig.canvas.draw_idle()
   110
   111         1         71.0     71.0      0.0         def updateMaxTime(newVal):
   112                                                          global susceptible, infected, recovered
   113
   114                                                          newData = genData(a, b, int(newVal.item()))
   115
   116                                                          del ax.lines[:3]
   117
   118                                                          susceptible, = ax.plot(newData[0], newData[1], label='Su
sceptible', color='b')
   119                                                          infected, = ax.plot(newData[0], newData[2], label='Infec
ted', color='r')
   120                                                          recovered, = ax.plot(newData[0], newData[3], label='Reco
vered/Removed', color='g')
   121
   122         1        108.0    108.0      0.0         transmissionSlider.on_changed(updateTransmission)
   123         1         89.0     89.0      0.0         recoverySlider.on_changed(updateRecovery)
   124         1         83.0     83.0      0.0         timeSlider.on_changed(updateMaxTime)
   125
   126         1     509017.0 509017.0      1.0         resetAxes = plt.axes([0.8, 0.025, 0.1, 0.05])
   127         1      12050.0  12050.0      0.0         resetButton = Button(resetAxes, 'Reset', color='white')
   128
   129         1       9051.0   9051.0      0.0         r_o = plt.text(0.1, 1.5, r'$R_O$={:.2f}'.format(a/b), fontsize=1
2)
   130
   131         1        101.0    101.0      0.0         def reset(event):
   132                                                      transmissionSlider.reset()
   133                                                      recoverySlider.reset()
   134                                                      timeSlider.reset()
   135
   136         1        142.0    142.0      0.0         resetButton.on_clicked(reset)
   137
   138         1   35600391.0 35600391.0     71.6       plt.show()

